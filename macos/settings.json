{
    "cmake.configureOnOpen": true,
    "cmake.additionalCompilerSearchDirs": [
        "/opt/homebrew/opt/llvm/bin/"
    ],
    "clangd.arguments": [
        "--compile-commands-dir=${workspaceFolder}/build",
        "--all-scopes-completion", // 全局补全(补全建议会给出在当前作用域不可见的索引,插入后自动补充作用域标识符),例如在main()中直接写cout,即使没有`#include <iostream>`,也会给出`std::cout`的建议,配合"--header-insertion=iwyu",还可自动插入缺失的头文件
        "--background-index", // 后台分析并保存索引文件
        "--clang-tidy", // 启用 Clang-Tidy 以提供「静态检查」
        "--clang-tidy-checks=performance-*, bugprone-*, misc-*, google-*, modernize-*, readability-*, portability-*",
        "--compile-commands-dir=${workspaceFolder}/.vscode", // 编译数据库(compile_commands.json 文件)的目录位置
        "--completion-parse=auto", // 当 clangd 准备就绪时，用它来分析建议
        "--completion-style=detailed", // 建议风格：打包(重载函数只会给出一个建议);还可以设置为 detailed
        // "--query-driver=/usr/bin/clang++", // MAC 上需要设定 clang 编译器的路径，也可以是 /usr/local/opt/llvm/bin/clang++
        // 启用配置文件(YAML格式)项目配置文件是在项目文件夹里的“.clangd”,用户配置文件是“clangd/config.yaml”,该文件来自:Windows: %USERPROFILE%\AppData\Local || MacOS: ~/Library/Preferences/ || Others: $XDG_CONFIG_HOME, usually ~/.config
        "--enable-config",
        "--fallback-style=Webkit", // 默认格式化风格: 在没找到 .clang-format 文件时采用,可用的有 LLVM, Google, Chromium, Mozilla, Webkit, Microsoft, GNU
        "--function-arg-placeholders=true", // 补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末
        "--header-insertion-decorators", // 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分
        "--header-insertion=iwyu", // 插入建议时自动引入头文件 iwyu
        "--include-cleaner-stdlib", // 为标准库头文件启用清理功能(不成熟!!!)
        "--log=verbose", // 让 Clangd 生成更详细的日志
        "--pch-storage=memory", // pch 优化的位置(Memory 或 Disk,前者会增加内存开销，但会提升性能)
        "--pretty", // 输出的 JSON 文件更美观
        "--ranking-model=decision_forest", // 建议的排序方案：hueristics (启发式), decision_forest (决策树)
        "-j=12" // 同时开启的任务数量
    ],
    "clangd.fallbackFlags": [
        "-pedantic",
        "-Wall",
        "-Wextra",
        "-Wcast-align",
        "-Wdouble-promotion",
        "-Wformat=2",
        "-Wimplicit-fallthrough",
        "-Wmisleading-indentation",
        "-Wnon-virtual-dtor",
        "-Wnull-dereference",
        "-Wold-style-cast",
        "-Woverloaded-virtual",
        "-Wpedantic",
        "-Wshadow",
        "-Wunused",
        "-pthread",
        "-fuse-ld=lld",
        "-fsanitize=address",
        "-fsanitize=undefined",
        "-stdlib=libc++",
        "-std=c++20"
    ],
    "clangd.serverCompletionRanking": true, // 借助网上的信息排序建议
    "editor.semanticHighlighting.enabled": true,
    "editor.semanticTokenColorCustomizations": {
      "enabled": true,
      "rules": {
        // 函数参数
        "parameter": "#306b72",
        // 类或者结构体
        "class": {
          "fontStyle": "bold",
          "foreground": "#729de3"
        },
        // 普通函数
        "function": {
          "foreground": "#e5b124"
        },
        // 临时变量
        "variable": "#26cdca",
        // enum的名字（enum的成员似乎并没有可以配置的）
        "enum": "#397797",
        // enum子项，需要clangd12以上
        "enumMember": "#397797",
        // 宏
        "macro": {
          "foreground": "#8f5daf",
          "fontStyle": "bold"
        },
        // 成员函数
        "method": {
          "foreground": "#e5b124",
          "fontStyle": "underline"
        },
        // clangd12之后会将宏关闭的部分标为comment
        "comment": "#505050",
        // 命名空间
        "namespace": {
          "foreground": "#00d780",
          "fontStyle": "bold"
        },
        // 只读量加粗
        "*.readonly": {
          "fontStyle": "bold"
        },
        // 只读量等效为宏
        "variable.readonly": {
          "foreground": "#8f5daf",
          "fontStyle": "bold"
        },
        // 静态量（静态变量，静态函数）
        "*.static": {
          "fontStyle": "italic"
        },
        // 成员变量，似乎需要clangd12以上
        "property": {
          "foreground": "#7ca6b7",
          "fontStyle": "underline"
        },
      }
    },
    "workbench.colorTheme": "Catppuccin Noctis",
    "terminal.integrated.inheritEnv": false,

}